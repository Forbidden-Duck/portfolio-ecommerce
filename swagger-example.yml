openapi: 3.0.0

servers: [
  {
    # CHANGE IP ADDRESS
    # CHANGE IP ADDRESS
    # CHANGE IP ADDRESS
    "url": "http://192.168.0.1:6001",
    "description": "Development Server"
  }
]

info:
  description: Codecademy Ecommerce REST API
  version: "1.0.0"
  title: Ecommerce
  contact:
    email: harrison.howard00707@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'

tags:
  - name: auth
    description: Authentication requests
  - name: users
    description: User requests
  - name: products
    description: Product requests
  - name: carts
    description: Cart requests
  - name: orders
    description: Order requests

paths:
  /auth/register:
    post:
      tags:
      - auth
      description: Create a new user
      operationId: registerNewUser
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              type: object
              required: 
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
  /auth/login:
    post:
      tags:
      - auth
      description: Authenticate a user
      operationId: loginExistingUser
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /users/{userid}:
    get:
      tags:
      - users
      description: Get a user
      operationId: getUserWithID
      parameters:
      - name: userid
        in: path
        description: The user's ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
      - users
      description: Update a user
      operationId: updateUserWithID
      parameters:
      - name: userid
        in: path
        description: The user's ID
        required: true
        schema:
          type: string
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /products:
    get:
      tags:
      - products
      description: Get all products
      operationId: getAllProducts
      requestBody:
        description: Product object query
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal Server Error
  /products/{productid}:
    get:
      tags:
      - products
      description: Get a product
      operationId: getAProductWithID
      parameters:
      - name: productid
        in: path
        description: The product's ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /carts:
    post:
      tags:
      - carts
      description: Create a new cart
      operationId: createANewCart
      requestBody:
        description: Cart object
        content:
          application/json:
            schema:
              type: object
              required:
              - userid
              properties:
                userid:
                  type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /carts/{cartid}:
    get:
      tags:
      - carts
      description: Get a cart
      operationId: getACartWithID
      parameters:
      - name: cartid
        in: path
        description: The cart's ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /carts/{cartid}/items:
    post:
      tags:
      - carts
      description: Add cart item
      operationId: addACartItem
      parameters:
      - name: cartid
        in: path
        description: The cart's ID
        required: true
        schema:
          type: string
      requestBody:
        description: Cart item object
        content:
          application/json:
            schema:
              type: object
              required:
              - productid
              - quantity
              - price
              properties:
                productid:
                  type: string
                quantity:
                  type: number
                  format: double
                price:
                  type: number
                  format: double
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /carts/{cartid}/items/{cartitemid}:
    put:
      tags:
      - carts
      description: Update a cart item
      operationId: updateACartItem
      parameters:
      - name: cartid
        in: path
        description: The cart's ID
        required: true
        schema:
          type: string
      - name: cartitemid
        in: path
        description: The cart item's ID
        required: true
        schema:
          type: string
      requestBody:
        description: Cart item object
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  format: double
                price:
                  type: number
                  format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
      - carts
      description: Delete a cart item
      operationId: deleteACartItem
      parameters:
      - name: cartid
        in: path
        description: The cart's ID
        required: true
        schema:
          type: string
      - name: cartitemid
        in: path
        description: The cart item's ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /carts/{cartid}/checkout:
    post:
      tags:
      - carts
      description: Checkout cart
      operationId: checkoutCart
      parameters:
      - name: cartid
        in: path
        description: The cart's ID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
                  charge:
                    type: string
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /orders:
    get:
      tags:
      - orders
      description: Get orders by userid
      operationId: getOrdersByUserID
      requestBody:
        description: Product object query
        content:
          application/json:
            schema:
              type: object
              required:
              - userid
              properties:
                userid:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal Server Error
  /orders/{orderid}:
    get:
      tags:
      - orders
      description: Get an order
      operationId: getOrderByID
      parameters:
      - name: orderid
        in: path
        description: The order's ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: f041080016ebb4c701873af10b93ddbbcd69a6ff5fefc3984051e508a2bbb0e3
        email:
          type: string
          example: myemail@email.com
        password:
          type: string
          example: notsecurepassword12345
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        createdat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
        modifiedat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
    Product:
      type: object
      properties:
        _id:
          type: string
          example: f041080016ebb4c701873af10b93ddbbcd69a6ff5fefc3984051e508a2bbb0e3
        name:
          type: string
          example: Hat
        description:
          type: string
          example: Company branded hat in a variety of colours
        price:
          type: number
          format: double
        createdat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
        modifiedat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
    Cart:
      properties:
        _id:
          type: string
          example: 659174517cac7f5f0b0680705a858387783c0beeb6307685e880450b5b9d3511
        userid:
          type: string
          example: f041080016ebb4c701873af10b93ddbbcd69a6ff5fefc3984051e508a2bbb0e3
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        createdat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
        modifiedat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
    CartItem:
      properties:
        _id:
          type: string
          example: b2e5553ba0497404b1587d0388690736e9f8c3430465e85c08cef7574b684932
        productid:
          type: string
          example: 1
        quantity:
          type: number
          format: double
        price:
          type: number
          format: double
        createdat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
        modifiedat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
    Order:
      properties:
        _id:
          type: string
          example: 659174517cac7f5f0b0680705a858387783c0beeb6307685e880450b5b9d3511
        userid:
          type: string
          example: f041080016ebb4c701873af10b93ddbbcd69a6ff5fefc3984051e508a2bbb0e3
        status:
          type: string
          example: PENDING
        total:
          type: number
          format: double
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        createdat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
        modifiedat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
    OrderItem:
      properties:
        _id:
          type: string
          example: b2e5553ba0497404b1587d0388690736e9f8c3430465e85c08cef7574b684932
        productid:
          type: string
          example: 1
        quantity:
          type: number
          format: double
        price:
          type: number
          format: double
        createdat:
          type: string
          example: '2021-05-04T04:53:14.386Z'
        modifiedat:
          type: string
          example: '2021-05-04T04:53:14.386Z'